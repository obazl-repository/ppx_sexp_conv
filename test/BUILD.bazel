package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//rules:build_test.bzl", "build_test")

load("@rules_ocaml//build:rules.bzl",
     "ocaml_module",
     "ocaml_signature",
     "ppx_executable",
     "ppx_module",
)

#################
build_test(
    name    = "test",
    targets = [
        ":Expansion",
        ":Nonrec_test",
        ":Ppx_sexp_test"
    ],
)

######################## Modules & Signatures ########################
ocaml_signature(
    name          = "Expansion.cmi",
    src           = "expansion.mli",
    deps          = ["@base//lib/base"],
    ppx           = ":ppx.exe",
)

ocaml_module(
    name          = "Expansion",
    struct        = "expansion.ml",
    sig           = ":Expansion.cmi",
    deps          = ["@base//lib/base"],
    ppx           = ":ppx.exe",
    ppx_args      = ["-loc-filename", "expansion.ml"]
)

ocaml_signature(
    name          = "Ppx_sexp_test.cmi",
    src           = "ppx_sexp_test.mli",
    ppx           = ":ppx.exe",
)

ocaml_module(
    name          = "Ppx_sexp_test",
    struct        = "ppx_sexp_test.ml",
    sig           = ":Ppx_sexp_test.cmi",
    deps          = [
        "@expect_test_helpers_core//lib/expect_test_helpers_core"
    ],
    ppx           = ":ppx.exe",
    ppx_args      = ["-inline-test-lib", "ppx_sexp_conv_test"]
)

ocaml_module(
    name          = "Nonrec_test",
    struct        = "nonrec_test.ml",
    opts          = ["-w", "-30", "-w", "-no-cmx-file"],
    ppx           = ":ppx.exe",
)


###############
ppx_executable(
    name    = "ppx.exe",
    main    = ":Ppx_driver",
    prologue = [
        "@ppxlib//lib/ppxlib",
        "//src:ppx_sexp_conv",
        "@ppx_compare//lib/ppx_compare",
        "@ppx_here//lib/ppx_here",
        "@ppx_expect//lib/ppx_expect",
    ],
)

#############
ppx_module(
    name       = "Ppx_driver",
    struct     = ":ppx_driver.ml",
    visibility = ["//visibility:public"],
    deps       = ["@ppxlib//lib/ppxlib"],
)

########
genrule(
    name = "__ppx_driver__",
    outs = ["ppx_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ])
)

